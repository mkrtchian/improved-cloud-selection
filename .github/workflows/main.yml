name: Continuous Integration and Delivery

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE: docker.pkg.github.com/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/improved_cloud_selection

jobs:
  build_backend:
    name: Build backend Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2.3.4
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file ./backend/Dockerfile.prod \
            "./backend"
      - name: Push image
        run: |
          docker push ${{ env.IMAGE }}:latest

  test_backend:
    name: Test backend with Docker image
    runs-on: ubuntu-latest
    needs: build_backend
    steps:
      - name: Checkout master
        uses: actions/checkout@v2.3.4
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file ./backend/Dockerfile.prod \
            "./backend"
      - name: Run container
        run: |
          docker run \
            -d \
            --name improved-cloud-selection \
            -e PORT=8765 \
            -e ENVIRONMENT=dev \
            -p 5003:8765 \
            ${{ env.IMAGE }}:latest
      - name: Install dev libs because they are not included in the production image
        run: docker exec improved-cloud-selection poetry install
      - name: Pytest
        run: docker exec improved-cloud-selection poetry run python -m pytest -n auto .
      - name: Flake8
        run: docker exec improved-cloud-selection poetry run python -m flake8 .
      - name: Mypy
        run: docker exec improved-cloud-selection poetry run python -m mypy .
      - name: Black
        run: docker exec improved-cloud-selection poetry run python -m black . --check

  deploy_backend:
    if: github.event_name == 'push'
    name: Deploy backend to Heroku
    runs-on: ubuntu-latest
    needs: [build_backend, test_backend]
    env:
      HEROKU_APP_NAME: damp-fortress-19341
      HEROKU_REGISTRY_IMAGE: registry.heroku.com/damp-fortress-19341/improved_cloud_selection
    steps:
      - name: Checkout master
        uses: actions/checkout@v2.3.4
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.HEROKU_REGISTRY_IMAGE }}:latest \
            --file ./backend/Dockerfile.prod \
            "./backend"
      - name: Log in to the Heroku Container Registry
        run: docker login -u _ -p ${HEROKU_AUTH_TOKEN} registry.heroku.com
        env:
          HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_AUTH_TOKEN }}
      - name: Push to the registry
        run: docker push ${{ env.HEROKU_REGISTRY_IMAGE }}
      - name: Set environment variables
        run: |
          echo "HEROKU_REGISTRY_IMAGE=${{ env.HEROKU_REGISTRY_IMAGE }}" >> $GITHUB_ENV
          echo "HEROKU_AUTH_TOKEN=${{ secrets.HEROKU_AUTH_TOKEN }}" >> $GITHUB_ENV
      - name: Release
        run: |
          chmod +x ./backend/release.sh
          ./backend/release.sh

  test_frontend:
    name: Test frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Install dependencies
        run: yarn install
        working-directory: ./frontend
      - name: Run eslint
        run: yarn lint
        working-directory: ./frontend
        env:
          CI: true
      - name: Run prettier
        run: yarn format-check
        working-directory: ./frontend
        env:
          CI: true
      - name: Run TypeScript compiler
        run: yarn type-check
        working-directory: ./frontend
        env:
          CI: true
      - name: Run unit tests
        run: yarn test
        working-directory: ./frontend
        env:
          CI: true

  deploy_frontend:
    if: github.event_name == 'push'
    name: Deploy frontend to github pages
    runs-on: ubuntu-latest
    needs: test_frontend
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Install dependencies
        run: yarn install
        working-directory: ./frontend
      - name: Deploy
        run: |
          git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          yarn deploy -- -u "github-actions-bot <support+actions@github.com>"
        working-directory: ./frontend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
